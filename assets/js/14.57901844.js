(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{366:function(t,s,a){"use strict";a.r(s);var n=a(42),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"控制器和路由管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#控制器和路由管理"}},[t._v("#")]),t._v(" 控制器和路由管理")]),t._v(" "),a("p",[t._v("控制器，路由，参数校验都是来自于 "),a("code",[t._v("routing-controllers")]),t._v(" 的规范，本脚手架只做应用。借助于 Typescript 的装饰器，控制器和路由可以放在一起声明。")]),t._v(" "),a("h2",{attrs:{id:"自动生成控制器样板代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自动生成控制器样板代码"}},[t._v("#")]),t._v(" 自动生成控制器样板代码")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("semo generate controller xxx\n")])])]),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" JsonController"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Get "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'routing-controllers'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// import { Inject } from 'typedi'")]),t._v("\n\n@"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("JsonController")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("XxxController")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n   * @api {get} /api/xxx/index index\n   * @apiDescription index\n   * @apiName GetIndex\n   * @apiGroup GroupName\n   *\n   * @apiParam {Number} id ID.\n   *\n   * @apiSuccess {String} data info\n   * @apiSuccess {String} code 0 means success, others are error code\n   */")]),t._v("\n  @"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/xxx/index'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("index")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'index'")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("可以看出，除了一些注释和装饰器，其实我们就是定义了一个不同的 Typescript 类，然后我们通过 "),a("code",[t._v("@JsonController")]),t._v(" 装饰器告诉框架这是一个 JSON 控制器，需要响应 "),a("code",[t._v("application/json")]),t._v(" 头信息。通过 "),a("code",[t._v("@Get")]),t._v(" 装饰器，我们定义了一个路由。整个控制器很好理解，而且将控制器和路由放在一起更方面快速定义和修改。")]),t._v(" "),a("p",[t._v("注意到这里有一大段注释，这是因为框架推荐使用 "),a("code",[t._v("Apidoc")]),t._v(" 来写接口文档，只要按照规范写，代码 push 到仓库的时候会自动生成相关的接口文档。")]),t._v(" "),a("p",[t._v("还有一个 "),a("code",[t._v("typedi")]),t._v(" 的代码行被注释了，这是告诉大家这里可以进行依赖注入，具体表现在除了可以将定义的 "),a("code",[t._v("Helper")]),t._v(" 和 "),a("code",[t._v("Service")]),t._v(" 用注入的方式引用到控制器当中，而且我们可以自定义装饰器实现注入。")]),t._v(" "),a("p",[t._v("如果我们要返回一个非 JSON 的响应，需要注入 "),a("code",[t._v("ctx")]),t._v(" 到控制器方法，然后通过 "),a("code",[t._v("ctx.json = false")]),t._v(" 来禁用 JSON 响应。")]),t._v(" "),a("h2",{attrs:{id:"参数校验"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参数校验"}},[t._v("#")]),t._v(" 参数校验")]),t._v(" "),a("p",[t._v("参数校验我们并没有使用之前常用的 "),a("code",[t._v("joi")]),t._v(" 包，而是用了 "),a("code",[t._v("routing-controllers")]),t._v(" 配套的 "),a("code",[t._v("class-validator")]),t._v("，以下是用法：")]),t._v(" "),a("h3",{attrs:{id:"定义一个校验器类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义一个校验器类"}},[t._v("#")]),t._v(" 定义一个校验器类")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// src/validation/ProjectValidation.ts")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" IsInt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" IsPositive "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"class-validator"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ProjectInfo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  @"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("IsInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  @"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("IsPositive")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  id"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" number\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"使用校验器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用校验器"}},[t._v("#")]),t._v(" 使用校验器")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" ProjectInfo "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'../validation/ProjectValidation'")]),t._v("\n@"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("JsonController")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ProjectController")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("show")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("@"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Params")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" params"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" ProjectInfo")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("整个过程，我们只需要定义好校验器类即可。所有校验器使用方式都是类似的，只需要确认参数是从 Query 传过来的还是从 Body 传过来的，极大的简化了代码架构，精简了控制器的代码，增加了一致性和验证规则的复用性。")])])}),[],!1,null,null,null);s.default=e.exports}}]);