(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{369:function(t,s,a){"use strict";a.r(s);var n=a(43),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"模型定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模型定义"}},[t._v("#")]),t._v(" 模型定义")]),t._v(" "),a("p",[t._v("脚手架里对模型的封装首先是基于 Sequelize 的，所以模型就是 Sequelize 的模型实例，但是定义模型时，希望避免之前项目中需要手动定义 "),a("code",[t._v("Schema")]),t._v(" 或者需要需要同步下载自动生成 "),a("code",[t._v("Schema。")])]),t._v(" "),a("p",[a("code",[t._v("Sequelize")]),t._v(" 的模型定义本身是需要提供 "),a("code",[t._v("Schema")]),t._v(" 的，这里通过 "),a("code",[t._v("semo-plugin-sequelize")]),t._v(" 自动完成了这部分，所以会使得模型定义更加简洁，只需要考虑业务逻辑。")]),t._v(" "),a("h2",{attrs:{id:"生成样板文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#生成样板文件"}},[t._v("#")]),t._v(" 生成样板文件")]),t._v(" "),a("p",[t._v("脚手架提供了生成样板代码的命令")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("semo create model project\n")])])]),a("p",[t._v("样板代码示例：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" Model "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'sequelize'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Project")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Model")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  id"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" number\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("customModelStaticMethod")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'I am a custom static method!'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("get")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("customVirtualProperty")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'I am a custom virtual property!'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'customVirtualProperty'")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("customInstanceMethod")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'I am a custom instance method!'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 约定的声明模型关系的方法，必须是静态方法")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("associate")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'I will do model relations association!'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" Project\n")])])]),a("ul",[a("li",[t._v("这是标准的 Sequelize 定义模型的方案，只是不用使用 Sequelize 的类型定义字段了")]),t._v(" "),a("li",[t._v("这里的字段声明是为了符合 TS 的校验，用的是 TS 的类型语法")])]),t._v(" "),a("p",[t._v("注意，每个模型样板代码生成之后都需要按需修改。这个样板代码是为了给人提示一个模型可以实现的特性：")]),t._v(" "),a("ul",[a("li",[t._v("模型关系定义 (Associations)")]),t._v(" "),a("li",[t._v("模型方法 (Class level methods)")]),t._v(" "),a("li",[t._v("模型实例方法 (Instance level methods)")]),t._v(" "),a("li",[t._v("模型变量 (Setters and Getters)")])]),t._v(" "),a("h2",{attrs:{id:"其他须知"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他须知"}},[t._v("#")]),t._v(" 其他须知")]),t._v(" "),a("p",[t._v("在真实的业务中，经常会有一些业务逻辑是需要多表联合查询的，这种方法是不建议定义在模型里的，而是在  "),a("code",[t._v("Service")]),t._v(" 层来做这个事情。")]),t._v(" "),a("p",[t._v("模型样板代码生成脚本在 "),a("code",[t._v("bin/semo/extends/semo/src/commands/generate/model.ts")]),t._v("，所以可以按照自己的需求随意更改。")])])}),[],!1,null,null,null);s.default=e.exports}}]);