(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{356:function(v,_,e){"use strict";e.r(_);var t=e(42),o=Object(t.a)({},(function(){var v=this,_=v.$createElement,e=v._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("h1",{attrs:{id:"介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[v._v("#")]),v._v(" 介绍")]),v._v(" "),e("p",[e("strong",[v._v("Semo-Backend-Starter")]),v._v("(后面简称 Starter)，是一个后端项目开发的模版代码，配合 Semo 提供的各种开发工具和 MVC 的架构，最终形成一个后端项目开发的脚手架。")]),v._v(" "),e("p",[v._v("本脚手架基于 node v12 开发，后面会继续根据新版本的 node 和各种依赖包的新特性进行优化，如果您的生产环境 Node 版本过低，建议考虑升级，或者尝试在低版本 Node 环境运行本项目。")]),v._v(" "),e("h2",{attrs:{id:"主要特性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#主要特性"}},[v._v("#")]),v._v(" 主要特性")]),v._v(" "),e("ul",[e("li",[v._v("基于 Typescript，依赖装饰器语法特性，引入依赖注入机制")]),v._v(" "),e("li",[v._v("约定了 "),e("code",[v._v("Controller")]),v._v(", "),e("code",[v._v("Model")]),v._v(", "),e("code",[v._v("Migration")]),v._v(", "),e("code",[v._v("Helper")]),v._v(", "),e("code",[v._v("Service")]),v._v(", "),e("code",[v._v("Validation")]),v._v(", "),e("code",[v._v("Decorator")]),v._v(", "),e("code",[v._v("Middleware")]),v._v(" 的分层架构")]),v._v(" "),e("li",[v._v("可扩展的支持常用代码自动生成，例如 "),e("code",[v._v("migration")]),v._v(", "),e("code",[v._v("controller")]),v._v(", "),e("code",[v._v("model")]),v._v(", "),e("code",[v._v("dts")])]),v._v(" "),e("li",[v._v("Sequelize标准模型声明方式，降低上手难度")]),v._v(" "),e("li",[v._v("不需要手写维护 "),e("code",[v._v("Schema")]),v._v("，数据变更完全基于 "),e("code",[v._v("Migration")]),v._v("，模型定义字段声明在内存中自动进行")]),v._v(" "),e("li",[v._v("能够较容易的支持多数据库实例和多 "),e("code",[v._v("Redis")]),v._v(" 实例")]),v._v(" "),e("li",[v._v("针对计划任务，命令行工具，批处理脚本，数据库变更等场景进行规范约束")]),v._v(" "),e("li",[v._v("代码更加精简，常用功能的解决方案都进行和抽象封装，方便复用")]),v._v(" "),e("li",[v._v("集成 "),e("code",[v._v("Vuepress")]),v._v(" 和 "),e("code",[v._v("Apidoc")]),v._v("，让代码和文档同步更新")]),v._v(" "),e("li",[v._v("类似 "),e("code",[v._v("Egg.js")]),v._v(" 的渐进式开发思路，业务开发过程中孵化可复用的 "),e("code",[v._v("Semo")]),v._v(" 插件")])]),v._v(" "),e("h2",{attrs:{id:"为什么要再造一个轮子"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么要再造一个轮子"}},[v._v("#")]),v._v(" 为什么要再造一个轮子")]),v._v(" "),e("p",[v._v("市面上有很多 Node 脚手架了，但是还是有很多公司和个人喜欢自己组装项目架构，这个过程还是非常浪费时间的，这里希望这个项目能给大家一个参考，如果大家认同项目的大部分设置，那么可以基于这个项目进一步修改。本项目的理念是，复杂性通过插件和配置隔离和开关，推崇约定大于配置。")]),v._v(" "),e("h2",{attrs:{id:"业务项目怎么写自己的文档"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#业务项目怎么写自己的文档"}},[v._v("#")]),v._v(" 业务项目怎么写自己的文档")]),v._v(" "),e("p",[v._v("本文档是关于框架怎么使用的说明文档，其本身也是希望帮助业务项目快速建立起文档基础设施（包括基于 apidoc 的 API 文档基础设施），让业务项目可以根据业务实际情况完善业务文档的部分，CICD 已经都配置好了，略加修改就可以拿去使用。")]),v._v(" "),e("p",[v._v("由于业务项目的维护者不一定知道或者能看到脚手架项目，所以不建议业务项目完全删除脚手架的说明文档，而是应该把业务项目根据实际情况增加的部分（业务设计或者框架底层的升级改造），以很好的结构化合并进这个文档，使得项目在长期的维护过程中，经验不断积累。然后这个 Starter 项目可以结合大家的文档和代码不断完善自身，形成良性循环。")])])}),[],!1,null,null,null);_.default=o.exports}}]);