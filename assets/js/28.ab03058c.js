(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{380:function(t,s,a){"use strict";a.r(s);var n=a(42),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"单元测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单元测试"}},[t._v("#")]),t._v(" 单元测试")]),t._v(" "),a("p",[t._v("Node 单元测试有多种方案，而且 "),a("code",[t._v("javascript")]),t._v(" 和 "),a("code",[t._v("typescript")]),t._v(" 技术栈在相同方案里的配置方式也略有不同，本脚手架希望能够让大家在这方面少走弯路，提前为大家踩坑，能够真正做到 "),a("code",[t._v("TDD")]),t._v(" 或 "),a("code",[t._v("BDD")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"tdd-和-bdd-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tdd-和-bdd-的区别"}},[t._v("#")]),t._v(" "),a("code",[t._v("TDD")]),t._v(" 和 "),a("code",[t._v("BDD")]),t._v(" 的区别")]),t._v(" "),a("p",[t._v("没有找到这方面的准确定义，先写下我查完资料的理解，后面大家可以继续完善。"),a("code",[t._v("TDD")]),t._v(" 和 "),a("code",[t._v("BDD")]),t._v(" 不是独立的测试方法，而是递进关系的，只是侧重点有些不同。"),a("code",[t._v("TDD")]),t._v(" 强调的是测试驱动开发，测试先行。而 "),a("code",[t._v("BDD")]),t._v(" 在 "),a("code",[t._v("TDD")]),t._v(" 的基础上，增加了测试用例必须要覆盖需求，并且必须能用非技术人员能理解的方式描述。"),a("code",[t._v("BDD")]),t._v(" 的结构单元通常是基于"),a("code",[t._v("Scenario")]),t._v("的，按照 "),a("code",[t._v("GIVEN-WHEN-THEN")]),t._v("的结构，也就是在什么场景前提下，当满足什么条件时必须要产生什么行为和结果。然后，若干 "),a("code",[t._v("Scenario")]),t._v(" 构成 "),a("code",[t._v("Feature")]),t._v("，若干 "),a("code",[t._v("Feature")]),t._v(" 构成整个系统。")]),t._v(" "),a("p",[t._v("可以看出 "),a("code",[t._v("BDD")]),t._v(" 的要求更高，我们在不熟悉单元测试的时候，可以先从 "),a("code",[t._v("TDD")]),t._v(" 入手，尝试用测试来驱动开发，当然在这个过程中，也可以使用 "),a("code",[t._v("BDD")]),t._v(" 的思想，让测试用例的描述更接近需求用户，而不是技术人员视角。比如")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 技术思维")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("it")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1 + 1 === 2'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("assert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 业务思维")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("it")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'should be 2 when 1 plus 1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("assert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("上面的例子可能不是很恰当，只是为了便于让大家理解，如果不对请指正。我们选择基于 "),a("code",[t._v("mocha")]),t._v(" 测试框架编写单元测试，是通知支持 "),a("code",[t._v("TDD")]),t._v(" 和 "),a("code",[t._v("BDD")]),t._v(" 风格的，我们甚至可以不分那么细致，只要能提高系统的可靠性即可。")]),t._v(" "),a("h2",{attrs:{id:"测试用例文件的位置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#测试用例文件的位置"}},[t._v("#")]),t._v(" 测试用例文件的位置")]),t._v(" "),a("p",[t._v("我们有两种选择，要么就把测试文件和被测试的文件放在一起")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("func.ts\nfunc.spec.ts\n")])])]),a("p",[t._v("要么就分开放")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("src/func.ts\ntest/func.spec.ts\n")])])]),a("p",[t._v("理论上，这两种方式都可以，但是考虑到长期维护一个项目的开发体验，我们推荐后面一种，也就是将测试用例集中放到 test 目录。如果放到一起，你可以获得编写单元测试容易定位的优点，但是也会污染源码目录，不管是用 IDE 还是用命令行都不得不收到测试用例文件的干扰。")]),t._v(" "),a("p",[t._v("而且有一些 IDE 的插件也希望测试用例都放在一起，还有人说，如果是跟源码放一起，就必须执行严格的编码规范，但是测试用例单独存放，默认对代码质量要求就没有那么严格，只要达到目的即可。这方面网上有很多讨论，大家感兴趣可以去搜一搜，这里我们是倾向于规范一致，以便我们快速开始。")]),t._v(" "),a("h2",{attrs:{id:"测试用例的示例代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#测试用例的示例代码"}},[t._v("#")]),t._v(" 测试用例的示例代码")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" assert "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'assert'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// For power-assert working well, must use this style")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" suite"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" test "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'@testdeck/mocha'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'@testdeck/di-typedi'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" Inject "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'typedi'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" DemoService "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'../../src/service/DemoService'")]),t._v("\n\n@suite\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DemoServiceTest")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n  @"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Inject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" demoService"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" DemoService\n\n  @test\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("demoMethod")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("assert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("demoService"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("demoMethod")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("可以看到，和测试 "),a("code",[t._v("js")]),t._v(" 的 mocha 示例代码不太一样，我们这里使用了装饰器，而且我们要测试的 "),a("code",[t._v("Helper")]),t._v(" 和 "),a("code",[t._v("Service")]),t._v(" 也都是用了装饰器，为了把这些整合在一起，还是有一些坑的，这也就是脚手架的意义和价值，可以给你一个能用的版本，少走些弯路。")]),t._v(" "),a("h3",{attrs:{id:"传统的-mocha-用例风格"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#传统的-mocha-用例风格"}},[t._v("#")]),t._v(" 传统的 "),a("code",[t._v("mocha")]),t._v(" 用例风格")]),t._v(" "),a("p",[t._v("当然，如果不喜欢这种装饰器的风格，也可以用传统的测试用例风格，不过这样为了测试 "),a("code",[t._v("typedi")]),t._v(" 修饰的 "),a("code",[t._v("Helper")]),t._v(" 和 "),a("code",[t._v("Service")]),t._v(" 的时候就要这样写了。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" assert "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'assert'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// For power-assert working well, must use this style")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" Container "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'typedi'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" DemoService "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'../../src/service/DemoService'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("describe")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'DemoService'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("describe")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'demoMethod'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("it")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'should be 4 when pass 1 and 2'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("assert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("DemoService"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("demoMethod")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("这里仅供参考，相比较而言，用装饰器的方式看起来要更简洁一些。")]),t._v(" "),a("h2",{attrs:{id:"测试结果示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#测试结果示例"}},[t._v("#")]),t._v(" 测试结果示例")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("TS_NODE_TRANSPILE_ONLY")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("NODE_ENV")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("test mocha\n\n\n  DemoServiceTest\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" demoMethod\n\n\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" passing "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("56ms"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" failing\n\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" DemoServiceTest\n       demoMethod:\n\n      AssertionError "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("ERR_ASSERTION"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(":   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# DemoService.spec.ts:23")]),t._v("\n\n  assert"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("this.demoService.demoMethod"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n              "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("           "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("                "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n              "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("           "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("                "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n              DemoService"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" this.demoService.demoMethod"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n\n      + expected - actual\n\n      -false\n      +true\n")])])]),a("p",[t._v("可以看出，当测试用例执行失败时，给出的提示信息还是很友好的，这是因为用了 "),a("code",[t._v("power-assert")]),t._v(" 断言库。")]),t._v(" "),a("h2",{attrs:{id:"执行测试的命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#执行测试的命令"}},[t._v("#")]),t._v(" 执行测试的命令")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("yarn test\n")])])]),a("p",[t._v("可以看到，在 "),a("code",[t._v("package.json")]),t._v(" 里，这个子命令的定义是：")]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"test"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"TS_NODE_TRANSPILE_ONLY=1 NODE_ENV=test mocha"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("这里 "),a("code",[t._v("TS_NODE_TRANSPILE_ONLY")]),t._v(" 是必须的，不然会报错，但是加上就不会报错了，能满足我们的需求，后面如果能去掉这个限制更好。")]),t._v(" "),a("h2",{attrs:{id:"关于-tsconfig-json"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关于-tsconfig-json"}},[t._v("#")]),t._v(" 关于 "),a("code",[t._v("tsconfig.json")])]),t._v(" "),a("p",[t._v("项目中有一个 test 目录，里面也有一个 "),a("code",[t._v("tsconfig.json")]),t._v("，原因是，test 目录里的文件虽然也是 ts 写的，但是执行用例不需要编译之后执行。分开写可以让编译后的代码都是项目的业务逻辑，用例文件是被排除的，如果以后用例积累的越来越多，相对来说这么处理编译速度也会更快一些。")])])}),[],!1,null,null,null);s.default=e.exports}}]);