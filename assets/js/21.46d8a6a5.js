(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{367:function(s,t,a){"use strict";a.r(t);var e=a(43),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"扩展性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#扩展性"}},[s._v("#")]),s._v(" 扩展性")]),s._v(" "),a("h2",{attrs:{id:"semo-插件机制带来的扩展性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#semo-插件机制带来的扩展性"}},[s._v("#")]),s._v(" Semo 插件机制带来的扩展性")]),s._v(" "),a("p",[s._v("通过实现 Semo 的插件，我们可以将一些业务逻辑封装进去。")]),s._v(" "),a("h3",{attrs:{id:"创建一个插件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建一个插件"}},[s._v("#")]),s._v(" 创建一个插件")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("semo generate plugin test\n")])])]),a("p",[s._v("这样就会生成基本的插件结构，我们可以在里面封装业务逻辑，或者可复用的功能。")]),s._v(" "),a("h3",{attrs:{id:"创建一个扩展其他插件的插件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建一个扩展其他插件的插件"}},[s._v("#")]),s._v(" 创建一个扩展其他插件的插件")]),s._v(" "),a("p",[s._v("这种主要是通过扩展其他插件的命令，或者给其他插件的钩子注入数据的方式。")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("semo generate "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("command")]),s._v(" generate/new-command --extend"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("semo\n")])])]),a("p",[s._v("通过这种机制，我们可用一些新的插件给 "),a("code",[s._v("semo")]),s._v(" 这个插件定义的 "),a("code",[s._v("generate")]),s._v(" 子命令添加下级命令。")]),s._v(" "),a("h2",{attrs:{id:"semo-钩子机制带来的扩展性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#semo-钩子机制带来的扩展性"}},[s._v("#")]),s._v(" Semo 钩子机制带来的扩展性")]),s._v(" "),a("p",[s._v("通过钩子，我们可以在代码执行到任何地方的时候，让插件参与提供数据或者逻辑，使得最后的执行结果是核心和插件共同决定的。")]),s._v(" "),a("p",[a("code",[s._v("hook_component")]),s._v(" 就是一个比较常用的钩子，其他插件通过实现这个钩子，让程序用相同的方式初始化获得资源对象。那么怎样实现一个钩子呢？")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// bin/semo/hooks/index.js")]),s._v("\nexports"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("hook_component "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  c"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'d'")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("p",[s._v("这样，别的逻辑在钩子被调用之后就可以拿到这个值，例如：")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" c "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Utils"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("invokeHook")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'component'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),a("p",[s._v("另外，这里的钩子不仅支持纯对象，也支持函数，甚至是 Promise 函数。")])])}),[],!1,null,null,null);t.default=n.exports}}]);