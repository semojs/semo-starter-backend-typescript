(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{362:function(t,s,a){"use strict";a.r(s);var e=a(43),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"全局变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#全局变量"}},[t._v("#")]),t._v(" 全局变量")]),t._v(" "),a("p",[t._v("虽然说一个良好的架构应该尽可能的减少全局变量的使用，但目前我们为了框架的简单还是使用了一些全局变量。为了在 "),a("code",[t._v("Typescript")]),t._v(" 环境下使用全局变量，我们为全局变量增加了 "),a("code",[t._v("global.d.ts")]),t._v(" 类型声明文件，并且这个文件是可以自动生成和更新的。")]),t._v(" "),a("h2",{attrs:{id:"添加全局变量的工具方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#添加全局变量的工具方法"}},[t._v("#")]),t._v(" 添加全局变量的工具方法")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// src/func.ts")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("addGlobalConst")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Object.defineProperty 定义值默认为不可配置，不可枚举，不可写")]),t._v("\n  Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("defineProperty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("global"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" value "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("p",[t._v("这个方法在 global 对象上定义键值对，使用的是 "),a("code",[t._v("Object.defineProperty")]),t._v(" 方法，这么定义隐含的意思是定义的键值对是不可修改的，也就是是一个 "),a("code",[t._v("const")]),t._v(" 常量。")]),t._v(" "),a("h2",{attrs:{id:"其他全局变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他全局变量"}},[t._v("#")]),t._v(" 其他全局变量")]),t._v(" "),a("ul",[a("li",[t._v("db: 全局数据库实例，这里我们假设的是一个服务只连一个数据库，如果需要连多个，更倾向于定义成一个对象，例如 "),a("code",[t._v("db.db1")]),t._v(", "),a("code",[t._v("db.db2")]),t._v("。")]),t._v(" "),a("li",[t._v("Op: Sequelize v4开始数据库操作已经不建议使用 "),a("code",[t._v("$eq")]),t._v(" 这种了，而是需要用 "),a("code",[t._v("Op.eq")]),t._v(" 代替。")]),t._v(" "),a("li",[t._v("ROOT_DIR: 项目根目录路径")]),t._v(" "),a("li",[t._v("Exception: 异常对象，需要使用时直接 "),a("code",[t._v("throw new Exception('xxx')")]),t._v(" 即可，另外如果认为有必要，也可以定义更多的异常对象类型。")]),t._v(" "),a("li",[t._v("errors: 错误码对象，我们在这里进行错误码的定义。具体请看错误码小节。")]),t._v(" "),a("li",[t._v("CFG: 配置对象，Consul 配置也会合并进来。")]),t._v(" "),a("li",[t._v("Promise: 封装的 Bluebird。")]),t._v(" "),a("li",[t._v("debug: 封装的 "),a("code",[t._v("debug")]),t._v(" 包， 调试信息都是基于 "),a("code",[t._v("application")]),t._v(" 这个前缀的。")]),t._v(" "),a("li",[t._v("API: 封装的 "),a("code",[t._v("axios")]),t._v(" 包，默认已经把 "),a("code",[t._v("X-Service")]),t._v(" 支持了，而且还对我们各服务返回值进行了初步的识别和兼容。")]),t._v(" "),a("li",[t._v("redis: 封装的 "),a("code",[t._v("ioredis")]),t._v(" 包，已经连接上了，如果需要 "),a("code",[t._v("Pub/Sub")]),t._v(" 机制，可以链接多个，例如： "),a("code",[t._v("redisPub")]),t._v(" 和 "),a("code",[t._v("redisSub")]),t._v("。")])]),t._v(" "),a("p",[t._v("当然这里只是初步定义了一些全局变量，如果你觉得有必要可以按需调整。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("为什么没有把 "),a("code",[t._v("lodash")]),t._v(" 放进来，因为 lodash 一般我们习惯命名成 "),a("code",[t._v("_")]),t._v("，但是做为公共的 init 文件，我们也要在 "),a("RouterLink",{attrs:{to:"/topics/repl/"}},[t._v("REPL")]),t._v(" 中使用，这样会与 REPL 里的 "),a("code",[t._v("_")]),t._v(" 用法冲突。如果需要使用 "),a("code",[t._v("lodash")]),t._v("，可以用的时候再 "),a("code",[t._v("import")]),t._v("，也可以用 "),a("code",[t._v("Semo")]),t._v(" 里内置的：")],1),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" Utils "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'@semo/core'")]),t._v("\n\nUtils"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])])}),[],!1,null,null,null);s.default=n.exports}}]);