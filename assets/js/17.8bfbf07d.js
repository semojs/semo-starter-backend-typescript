(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{363:function(e,a,t){"use strict";t.r(a);var s=t(42),r=Object(s.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"快速上手"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#快速上手"}},[e._v("#")]),e._v(" 快速上手")]),e._v(" "),t("p",[e._v("本文档的目的是让你可以快速开始，把项目跑起来，暂时先不解释里面的各个部分。")]),e._v(" "),t("h2",{attrs:{id:"全局安装-semo-命令行工具"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#全局安装-semo-命令行工具"}},[e._v("#")]),e._v(" 全局安装 Semo 命令行工具")]),e._v(" "),t("p",[t("code",[e._v("Semo")]),e._v(" 命令行工具是一个辅助工程师开发，运维和调试的命令行工具，我们建议你在本地环境全局安装，具体的使用说明可以参考："),t("a",{attrs:{href:"https://semo.js.org",target:"_blank",rel:"noopener noreferrer"}},[e._v("这里"),t("OutboundLink")],1)]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("npm i -g @semo/cli\n")])])]),t("h2",{attrs:{id:"初始化一个后端项目"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#初始化一个后端项目"}},[e._v("#")]),e._v(" 初始化一个后端项目")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("semo create YOUR_PROJECT REPO_URL\ncd YOUR_PROJECT\nyarn dts # 更新全局变量声明文件 /src/global.d.ts，这个文件需要加入代码仓库，否则线上构建会失败\nyarn watch # 实时 typescript 编译\nyarn start # 启动后端\nyarn cron # 启动计划任务，如果不写计划任务可以不启动\n")])])]),t("p",[e._v("执行以后应该就可以看到项目在本地的8080端口跑起来了：http://localhost:8080。")]),e._v(" "),t("h3",{attrs:{id:"也可以通过-pm2-启动"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#也可以通过-pm2-启动"}},[e._v("#")]),e._v(" 也可以通过 pm2 启动")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("yarn watch # 单开一个窗口，和 pm2联动，可以实现保存之后编译，然后重启 pm2\nyarn start:pm2 # 启动 pm2，可以重复执行，执行后自动打开日志\nyarn stop:pm2 # 停止 pm2，实际逻辑是删除了 pm2 实例\n")])])]),t("h2",{attrs:{id:"脚手架代码生成器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#脚手架代码生成器"}},[e._v("#")]),e._v(" 脚手架代码生成器")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("$ semo generate help\n\nsemo generate <component>\n\nGenerate component sample code\n\n命令：\n  semo generate command <name> [description]               Generate a command template\n  semo generate plugin <name>                              Generate a plugin structure\n  semo generate script <name>                              Generate a script file\n  semo generate cron <name>                                Generate a semo cron job file\n  semo generate migration <dbKey> <tableName> [fieldName]  Generate a db migration\n  semo generate controller <name>                          Generate a application model\n  semo generate dts                                        Generate global dts file\n  semo generate model <name>                               Generate a application model\n")])])]),t("h2",{attrs:{id:"访问和编写文档"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#访问和编写文档"}},[e._v("#")]),e._v(" 访问和编写文档")]),e._v(" "),t("p",[e._v("本项目的开源版本把文档托管在对应的 "),t("code",[e._v("Github Pages")]),e._v(" 里，如果你使用这个 Starter 来开发你的业务项目，建议也通过比如 Gitlab Pages 或者简单的 Web 服务把文档部署成可访问可随着项目提交一起更新的模式。")]),e._v(" "),t("p",[e._v("在开发时要尽量实现开发和编写相关文档的同步，第一时间记录文档是最省力的，而编写技术文档是提升项目生命力的有效手段，每个新加入团队的成员都会感激你在编写文档上所做的努力。编写文档使用我们常用的开发工具即可，对我们来说通常是 "),t("code",[e._v("VSCode")]),e._v("，然后运行如下命令，一边编写一遍预览：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("yarn docs:dev\n")])])]),t("h2",{attrs:{id:"repl交互模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#repl交互模式"}},[e._v("#")]),e._v(" REPL交互模式")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("yarn repl\n")])])]),t("p",[e._v("这个命令是基于 Semo 实现的。通过这个命令，可以进入 node 的 REPL 模式，和原生 node 命令相比，这里做了扩展，比如支持使用 "),t("code",[e._v("await")]),e._v(" 执行 "),t("code",[e._v("Promise")]),e._v(", 并且注入了很多开发资源，里面的 "),t("code",[e._v("Semo")]),e._v(" 对象是一个常用了工具对象，里面封装了各种各样的常用包，常用函数，通过 "),t("code",[e._v("--hook")]),e._v(" 可以允许项目注入新的对象到 REPL 的 Semo 对象，特别是业务项目自己封装的工具对象，例如：helpers 方法入口对象，services 方法入口对象等注入到 REPL，方便随时调试验证。")]),e._v(" "),t("p",[e._v("就算业务项目还没有封装任何方法，你已经可以实现下面的需求了")]),e._v(" "),t("h3",{attrs:{id:"调用各个数据库的-sequelize-模型，查询想要的数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#调用各个数据库的-sequelize-模型，查询想要的数据"}},[e._v("#")]),e._v(" 调用各个数据库的 Sequelize 模型，查询想要的数据")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("> const { Account } = await sequelize.db.load('db1')\n> await Account.count()\n")])])]),t("h3",{attrs:{id:"调用-redis-api-查询指定的-key"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#调用-redis-api-查询指定的-key"}},[e._v("#")]),e._v(" 调用 Redis API 查询指定的 key")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("> const redis = await redis.load('redis1')\n> await redis.keys('*KEY*')\nKEY\n> await redis.type('KEY')\nset\n> await redis.smembers('KEY')\n...\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);